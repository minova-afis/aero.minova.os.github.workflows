name: Release Java applications
run-name: Release Java applications ${{ inputs.release-type }}
on:
  workflow_call:
    inputs:
# TODO do-containerize mit release-type zum laufen bringen.
#      do-containerize:
#        description: 'Should CI flow create a container image?'
#        type: boolean
#        default: false
      container-name:
        description: 'Alternative name for the container-image, otherwise \$github.event.repository.name'
        type: string
        default: ${{ github.event.repository.name }}
      registry:
        description: 'Container registry to be used, e.g. ghcr.io, docker.io'
        type: string
        default: 'ghcr.io'
      folder:
        description: 'Folder of the software project to be released in the repo.'
        type: string
        default: './'
      release-type:
        type: string
        description: Type of release
        required: true
      java-version:
        description: 'This is the version of Java used for release.'
        type: string
        default: '21'
    outputs:
      container-image:
        description: "Fully qualified name of the prepared container image"
        value: ${{jobs.build.outputs.container-image}}

jobs:
  release:
    name: release, containerize ... repeat
    runs-on: ubuntu-latest
    outputs:
      container-image: ${{steps.container-name-and-githash.outputs.container-image}}

    strategy:
      matrix:
        java-version:
          - ${{inputs.java-version}}

    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MAIN_GITHUB_REPO_FULL_ACCESS }}

      - name: set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java-version }}
          java-package: 'jdk'
          cache: 'maven'

      - name: Maven release '${{ inputs.release-type }}'
        shell: bash
        run: |
          git config --global user.email "service@minova.com"
          git config --global user.name "minova-worker"
          cd $GITHUB_WORKSPACE/${{inputs.folder}}
          if [ "${{ inputs.release-type }}" = "Patch" ]; then
            echo "Releasing patch"
            
            mvn --batch-mode --no-transfer-progress \
              -P repo-github \
              release:prepare release:perform \
              -Dusername=$GITHUB_ACCESS_TOKEN \
              -Dpassword=$GITHUB_ACCESS_TOKEN \
              -Darguments="-Dmaven.javadoc.skip=true" \
              -Darguments="-DAWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} -DAWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              --settings $GITHUB_WORKSPACE/.github/settings.xml
          fi
          if [ "${{ inputs.release-type }}" = "Minor" ]; then
            set -x
            echo "Releasing minor"
            
            current=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --settings $GITHUB_WORKSPACE/.github/settings.xml)
            echo Current: $current
            major=$(echo $current | cut -d. -f1)
            echo Major: $major
            minor=$(echo $current | cut -d. -f2)
            echo Minor: $minor
            next_minor=$((minor + 1))
            echo Next Minor: $next_minor

            release_version="${major}.${next_minor}.0"
            echo Release Version: $release_version
            development_version="${major}.${next_minor}.0-SNAPSHOT"
            echo Development version: $development_version

            mvn --batch-mode --no-transfer-progress \
              -P repo-github \
              release:prepare release:perform \
              -Dusername=$GITHUB_ACCESS_TOKEN \
              -Dpassword=$GITHUB_ACCESS_TOKEN \
              -DreleaseVersion=${release_version} \
              -DdevelopmentVersion=${development_version} \
              -Darguments="-Dmaven.javadoc.skip=true" \
              -Darguments="-DAWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} -DAWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              --settings $GITHUB_WORKSPACE/.github/settings.xml
          fi
          if [ "${{ inputs.release-type }}" = "Major" ]; then
            set -x
            
            echo "Releasing major"

            current=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout --settings $GITHUB_WORKSPACE/.github/settings.xml)
            echo Current: $current
            major=$(echo $current | cut -d. -f1)
            echo Major: $major
            next_major=$((major + 1))
            echo Next Major: $next_major

            release_version="${next_major}.0.0"
            echo Release Version: $release_version
            development_version="${next_major}.0.0-SNAPSHOT"
            echo Development version: $development_version

            mvn --batch-mode --no-transfer-progress \
              -P repo-github \
              release:prepare release:perform \
              -Dusername=$GITHUB_ACCESS_TOKEN \
              -Dpassword=$GITHUB_ACCESS_TOKEN \
              -DreleaseVersion=${release_version} \
              -DdevelopmentVersion=${development_version} \
              -Darguments="-Dmaven.javadoc.skip=true" \
              -Darguments="-DAWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} -DAWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              --settings $GITHUB_WORKSPACE/.github/settings.xml
          fi
        env:
          MAIN_GITHUB_RELEASE_USERNAME: ${{ secrets.MAIN_GITHUB_RELEASE_USERNAME }}
          MAIN_GITHUB_RELEASE_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}
          GITHUB_ACCESS_TOKEN: ${{ secrets.MAIN_GITHUB_RELEASE_TOKEN }}

      - name: prepare container image name
        if: inputs.do-containerize == true
        id: container-name-and-githash
        shell: bash
        run: |
          GITHUB_SHA_SHORT=$(git rev-parse --short HEAD)
          echo "github_sha_short=$GITHUB_SHA_SHORT" >> $GITHUB_OUTPUT
          echo "container-image=${{inputs.registry}}/${{github.repository_owner}}/${{ inputs.container-name }}:${{ inputs.release-type }}" >> $GITHUB_OUTPUT

